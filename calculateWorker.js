"use strict";class CalculateWorker{constructor(){function a(A){y.deleteEclipses(),y.copyEclipsesIn(JSON.parse(A)),t&&q()}function b(A){var B=0;B=v?new Date().getTime()-v.getTime():r,B>=r&&(v=new Date,t=JSON.parse(A),console.log("CALCULATE WORKER: Coords udpated."),u&&p(),0<y.getEclipseCount()&&q())}function c(A){w=JSON.parse(A)}function d(A){u=new EclipseData(JSON.parse(A)),console.log("CALCULATE WORKER: Eclipse updated."),t&&p()}function f(A){var B=new EclipseData(JSON.parse(A));try{var C=B.drawCentralLine(),D=B.getCentralLineTimes(),E={cmd:"eclipse_central_line_update",line:JSON.stringify(C),times:JSON.stringify(D)};console.log("LINE WORKER: Central line drawn.")}catch(F){var E={cmd:"eclipse_central_line_error"};console.log("Central LINE DRAW ERROR: "+F.message)}postMessage(E)}function g(A){var B=new EclipseData(JSON.parse(A));try{var C=B.drawUmbraLimit(!0),D=B.getNorthUmbraTimes(),E={cmd:"eclipse_north_umbra_line_update",line:JSON.stringify(C),times:JSON.stringify(D)};console.log("LINE WORKER: North umbra line drawn.")}catch(F){var E={cmd:"eclipse_north_umbra_line_error"};console.log("North umbra line DRAW ERROR: "+F.message)}postMessage(E)}function h(A){var B=new EclipseData(JSON.parse(A));try{var C=B.drawUmbraLimit(!1),D=B.getSouthUmbraTimes(),E={cmd:"eclipse_south_umbra_line_update",line:JSON.stringify(C),times:JSON.stringify(D)};console.log("LINE WORKER: South umbra line drawn.")}catch(F){var E={cmd:"eclipse_south_umbra_line_error"};console.log("South umbra line DRAW ERROR: "+F.message)}postMessage(E)}function j(A){var B=new EclipseData(JSON.parse(A));try{var C=B.drawPenumbralLimit(!1),D={cmd:"eclipse_south_penumbra_line_update",line:JSON.stringify(C)};console.log("LINE WORKER: South penumbra line drawn.")}catch(E){var D={cmd:"eclipse_south_penumbra_line_error"};console.log("South penumbra line DRAW ERROR: "+E.message)}postMessage(D)}function k(A){var B=new EclipseData(JSON.parse(A));try{var C=B.drawPenumbralLimit(!0),D={cmd:"eclipse_north_penumbra_line_update",line:JSON.stringify(C)};console.log("LINE WORKER: North penumbra line drawn.")}catch(E){var D={cmd:"eclipse_north_penumbra_line_error"};console.log("North penumbra line DRAW ERROR: "+E.message)}postMessage(D)}function l(A,B,C){var D=new EclipseData(JSON.parse(A));"null"!==B&&D.setNorthPenumbraLine(JSON.parse(B)),"null"!==C&&D.setSouthPenumbraLine(JSON.parse(C));try{var E=D.drawEastWestLimit(!1),F=D.getEastLineTimes(),G={cmd:"eclipse_east_penumbra_line_update",line:JSON.stringify(E),times:JSON.stringify(F)}}catch(H){var G={cmd:"eclipse_east_penumbra_line_error"};console.log("East penumbra line DRAW ERROR: "+H.message)}postMessage(G),console.log("LINE WORKER: East penumbra line drawn.")}function m(A,B,C){var D=new EclipseData(JSON.parse(A));"null"!==B&&D.setNorthPenumbraLine(JSON.parse(B)),"null"!==C&&D.setSouthPenumbraLine(JSON.parse(C));try{var E=D.drawEastWestLimit(!0),F=D.getWestLineTimes(),G={cmd:"eclipse_west_penumbra_line_update",line:JSON.stringify(E),times:JSON.stringify(F)};console.log("LINE WORKER: West penumbra line drawn.")}catch(H){var G={cmd:"eclipse_west_penumbra_line_error"};console.log("West penumbra line DRAW ERROR: "+H.message)}postMessage(G)}function p(){var A=u.calculateLocalCircumstances(t.latitude,t.longitude,t.altitude),B={cmd:"eclipse_stats_update",eclipse_stats:JSON.stringify(A)};if(A.isVisible){var C=u.toDate(A.circDates.getMidDate());C.setUTCDate(C.getUTCDate()+1);var D=z.calcSunriseSetUTC(!0,C,t.latitude,t.longitude),E=z.calcSunriseSetUTC(!1,C,t.latitude,t.longitude),F=z.getSolarElevation(t.latitude,t.longitude,u.toDate(A.circDates.getMidDate()));B.sunrise=JSON.stringify(D),B.sunset=JSON.stringify(E),B.solar_elevation=F.toString()}postMessage(B),console.log("CALCULATE WORKER: Eclipse stats updated.")}function q(){var A=-1,B=new Date;B.setTime(B.getTime()+w),B.setDate(2+B.getDate());for(var C=[],D=0;D<y.getEclipseCount();D++){var E=y.getEclipse(D),F=E.calculateLocalCircumstances(t.latitude,t.longitude,t.altitude);F.isVisible&&(C.push(D),-1==A&&E.getMaxEclipseDate()>B&&(A=D))}var G={cmd:"visible_index_update",visible_array:JSON.stringify(C),next_visible:A.toString()};postMessage(G),console.log("CALCULATE WORKER: Eclipse visible array updated.")}var r=0,t=null,u=null,v=null,w=0,x=0;importScripts("EclipseCalc.js"),importScripts("SolarElevation.js");var y=new Eclipses,z=new SolarCalc;self.addEventListener("message",function(A){var B=A.data;switch(B.cmd){case"coords":b(B.coords);break;case"eclipse":d(B.eclipse);break;case"update_catalog":a(B.catalog);break;case"date_offset":c(B.offset);break;case"central_line":f(B.eclipse);break;case"north_umbra_line":g(B.eclipse);break;case"south_umbra_line":h(B.eclipse);break;case"south_penumbra_line":j(B.eclipse);break;case"north_penumbra_line":k(B.eclipse);break;case"east_penumbra_line":l(B.eclipse,B.north_pen_line,B.south_pen_line);break;case"west_penumbra_line":m(B.eclipse,B.north_pen_line,B.south_pen_line);break;default:console.log("CALCULATE WORKER: Invalid command.");}},!1),console.log("CALCULATE WORKER: Thread spawned.")}}var calc=new CalculateWorker;