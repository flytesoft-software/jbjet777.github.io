"use strict";class CalculateWorker{constructor(){function e(e){h.deleteEclipses(),h.copyEclipsesIn(JSON.parse(e)),R&&_()}function a(e){(S?(new Date).getTime()-S.getTime():d)>=d&&(S=new Date,R=JSON.parse(e),console.log("CALCULATE WORKER: Coords udpated."),O&&m(),h.getEclipseCount()>0&&_())}function s(e){b=JSON.parse(e),E=!0,O&&m()}function t(e){N=JSON.parse(e)}function n(e){O=new EclipseData(JSON.parse(e)),console.log("CALCULATE WORKER: Eclipse updated."),R&&m()}function i(e){var a=new EclipseData(JSON.parse(e));try{var s=a.drawCentralLine(),t=a.getCentralLineTimes(),n={cmd:"eclipse_central_line_update",line:JSON.stringify(s),times:JSON.stringify(t)};console.log("LINE WORKER: Central line drawn.")}catch(e){n={cmd:"eclipse_central_line_error"};console.log("Central LINE DRAW ERROR: "+e.message)}postMessage(n)}function r(e){var a=new EclipseData(JSON.parse(e));console.log("DRAW NORTH UMBRA.");try{var s=a.drawUmbraLimit(!0),t=a.getNorthUmbraTimes(),n={cmd:"eclipse_north_umbra_line_update",line:JSON.stringify(s),times:JSON.stringify(t)};console.log("LINE WORKER: North umbra line drawn.")}catch(e){n={cmd:"eclipse_north_umbra_line_error"};console.log("North umbra line DRAW ERROR: "+e.message)}postMessage(n)}function l(e){var a=new EclipseData(JSON.parse(e));try{var s=a.drawUmbraLimit(!1),t=a.getSouthUmbraTimes(),n={cmd:"eclipse_south_umbra_line_update",line:JSON.stringify(s),times:JSON.stringify(t)};console.log("LINE WORKER: South umbra line drawn.")}catch(e){n={cmd:"eclipse_south_umbra_line_error"};console.log("South umbra line DRAW ERROR: "+e.message)}postMessage(n)}function o(e){var a=new EclipseData(JSON.parse(e));try{var s=a.drawPenumbralLimit(!1),t={cmd:"eclipse_south_penumbra_line_update",line:JSON.stringify(s)};console.log("LINE WORKER: South penumbra line drawn.")}catch(e){t={cmd:"eclipse_south_penumbra_line_error"};console.log("South penumbra line DRAW ERROR: "+e.message)}postMessage(t)}function c(e){var a=new EclipseData(JSON.parse(e));try{var s=a.drawPenumbralLimit(!0),t={cmd:"eclipse_north_penumbra_line_update",line:JSON.stringify(s)};console.log("LINE WORKER: North penumbra line drawn.")}catch(e){t={cmd:"eclipse_north_penumbra_line_error"};console.log("North penumbra line DRAW ERROR: "+e.message)}postMessage(t)}function u(e,a,s){var t=new EclipseData(JSON.parse(e));"null"!==a&&t.setNorthPenumbraLine(JSON.parse(a)),"null"!==s&&t.setSouthPenumbraLine(JSON.parse(s));try{var n=t.drawEastWestLimit(!1),i=t.getEastLineTimes(),r={cmd:"eclipse_east_penumbra_line_update",line:JSON.stringify(n),times:JSON.stringify(i)}}catch(e){r={cmd:"eclipse_east_penumbra_line_error"};console.log("East penumbra line DRAW ERROR: "+e.message)}postMessage(r),console.log("LINE WORKER: East penumbra line drawn.")}function p(e,a,s){var t=new EclipseData(JSON.parse(e));"null"!==a&&t.setNorthPenumbraLine(JSON.parse(a)),"null"!==s&&t.setSouthPenumbraLine(JSON.parse(s));try{var n=t.drawEastWestLimit(!0),i=t.getWestLineTimes(),r={cmd:"eclipse_west_penumbra_line_update",line:JSON.stringify(n),times:JSON.stringify(i)};console.log("LINE WORKER: West penumbra line drawn.")}catch(e){r={cmd:"eclipse_west_penumbra_line_error"};console.log("West penumbra line DRAW ERROR: "+e.message)}postMessage(r)}function m(){var e=R,a="eclipse_stats_update";E&&(a="central_coords_data",e=b);var s=O.calculateLocalCircumstances(e.latitude,e.longitude,e.altitude,!0),t={cmd:a,eclipse_stats:JSON.stringify(s)};if(s.isVisible){var n=O.toDate(s.circDates.getMidDate());n.setUTCDate(n.getUTCDate()+1);var i=f.calcSunriseSetUTC(!0,n,e.latitude,e.longitude),r=f.calcSunriseSetUTC(!1,n,e.latitude,e.longitude),l=f.getSolarElevation(e.latitude,e.longitude,O.toDate(s.circDates.getMidDate()));t.sunrise=JSON.stringify(i),t.sunset=JSON.stringify(r),t.solar_elevation=l.toString()}postMessage(t),console.log("CALCULATE WORKER: Eclipse stats updated.")}function _(){var e=-1,a=new Date;a.setTime(a.getTime()+N),a.setDate(a.getDate()-g);for(var s=[],t=0;t<h.getEclipseCount();t++){var n=h.getEclipse(t);n.calculateLocalCircumstances(R.latitude,R.longitude,R.altitude).isVisible&&(s.push(t),-1===e&&n.getMaxEclipseDate()>a&&(e=t))}var i={cmd:"visible_index_update",visible_array:JSON.stringify(s),next_visible:e.toString()};postMessage(i),console.log("CALCULATE WORKER: Eclipse visible array updated.")}var d=0,g=2,E=!1,b=null,R=null,O=null,S=null,N=0;importScripts("EclipseCalc.js"),importScripts("SolarElevation.js");var h=new Eclipses,f=new SolarCalc;self.addEventListener("message",m=>{var _=m.data;switch(E=!1,_.cmd){case"coords":a(_.coords);break;case"central_coords":s(_.coords);break;case"eclipse":n(_.eclipse);break;case"update_catalog":e(_.catalog);break;case"date_offset":t(_.offset);break;case"central_line":i(_.eclipse);break;case"north_umbra_line":r(_.eclipse);break;case"south_umbra_line":l(_.eclipse);break;case"south_penumbra_line":o(_.eclipse);break;case"north_penumbra_line":c(_.eclipse);break;case"east_penumbra_line":u(_.eclipse,_.north_pen_line,_.south_pen_line);break;case"west_penumbra_line":p(_.eclipse,_.north_pen_line,_.south_pen_line);break;default:console.log("CALCULATE WORKER: Invalid command.")}},!1),console.log("CALCULATE WORKER: Thread spawned.")}}var calc=new CalculateWorker;